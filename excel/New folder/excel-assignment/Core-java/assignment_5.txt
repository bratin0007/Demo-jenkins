Assignment 5:Writing Thread-Safe Code, Immutable Objects
Design a thread-safe Counter class with increment and decrement methods. Then demonstrate its usage from multiple threads. Also, implement and use an immutable class to share data between threads. 
package a5_threadsafe;

/**
* Task 7: Writing Thread-Safe Code, Immutable Objects
* Design a thread-safe Counter class with increment and decrement 
* methods. Then demonstrate its usage from multiple 
* threads. Also, implement and use an immutable class to share data between threads.
*/


package a5_threadsafe;

public class ThreadSafeDemo {
    public static void main(String[] args) {
        Counter counter = new Counter();

        Runnable incrementTask = () -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        };

        Runnable decrementTask = () -> {
            for (int i = 0; i < 1000; i++) {
                counter.decrement();
            }
        };

        Thread thread1 = new Thread(incrementTask);
        Thread thread2 = new Thread(decrementTask);
        Thread thread3 = new Thread(incrementTask);
        Thread thread4 = new Thread(decrementTask);

        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();

        try {
            thread1.join();
            thread2.join();
            thread3.join();
            thread4.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Final count: " + counter.getCount());

        // Using the immutable class
        ImmutableData data = new ImmutableData(42);
        System.out.println("Immutable data value: " + data.getValue());
    }
}



public class Counter {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public synchronized void decrement() {
        count--;
    }

    public synchronized int getCount() {
        return count;
    }
}





package a5_threadsafe;

public class Counter {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public synchronized void decrement() {
        count--;
    }

    public synchronized int getCount() {
        return count;
    }
}



package a5_threadsafe;

public final class ImmutableData {
    private final int value;

    public ImmutableData(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }
}





