Asssignment 3:Thread Pools and Concurrency Utilities
Create a fixed-size thread pool and submit multiple tasks that perform complex calculations or I/O operations and observe the execution.


/**
 * Task 5: Thread Pools and Concurrency Utilities
* Create a fixed-size thread pool and submit multiple 
* tasks that perform complex calculations or 
* I/O operations and observe the execution.
*/


package a3_threadpool1;

import java.util.Random;
import java.util.concurrent.Callable;

public class Task implements Callable<String> {
    private final int taskId;

    public Task(int taskId) {
        this.taskId = taskId;
    }

    @Override
    public String call() throws Exception {
        Random random = new Random();
        int duration = random.nextInt(5000); // Random duration between 0 and 5 seconds
        System.out.println("Task " + taskId + " is running for " + duration + " milliseconds.");
        Thread.sleep(duration); // Simulate complex calculation or I/O operation
        return "Task " + taskId + " completed.";
    }
}




package a3_threadpool1;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ThreadPoolExample {
    public static void main(String[] args) {
        int numberOfTasks = 10;
        int poolSize = 4;

        ExecutorService executorService = Executors.newFixedThreadPool(poolSize);
        List<Future<String>> futures = new ArrayList<>();

        for (int i = 0; i < numberOfTasks; i++) {
            Task task = new Task(i);
            Future<String> future = executorService.submit(task);
            futures.add(future);
        }

        for (Future<String> future : futures) {
            try {
                System.out.println(future.get());
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executorService.shutdown();
    }
}



