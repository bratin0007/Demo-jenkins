Assignment 3: Explain the ACID properties of a transaction in your own words. Write SQL statements to simulate a transaction that includes locking and demonstrate different isolation levels to show concurrency control.

ACID Properties of a Transaction---------------------
Atomicity:

	Ensures that all operations within a transaction are completed successfully. If any part of the transaction fails, the entire transaction is rolled back, 	leaving the system state unchanged.
	Think of it as an all-or-nothing approach: either everything is done, or nothing is done.
Consistency:

	Ensures that a transaction takes the database from one valid state to another valid state, maintaining all predefined rules, such as constraints and 	triggers.
	After the transaction, the database remains in a consistent state, regardless of whether the transaction is successful or rolled back.
Isolation:

	Ensures that transactions are executed in isolation from each other, meaning that the intermediate states of a transaction are not visible to other 	transactions.
	This prevents concurrent transactions from interfering with each other and ensures data consistency.
Durability:

	Ensures that once a transaction has been committed, it remains so, even in the event of a system failure.
	The results of a committed transaction are permanently recorded in the database


Demonstrating Isolation Levels--------------------------------
Isolation levels control the visibility of intermediate states of a transaction to other concurrent transactions. The four standard isolation levels are:

Read Uncommitted: Allows transactions to see uncommitted changes made by other transactions, leading to dirty reads.
Read Committed: Ensures that a transaction only sees committed changes made by other transactions, preventing dirty reads.
Repeatable Read: Ensures that if a transaction reads a value, it will see the same value if it reads it again, preventing non-repeatable reads.
Serializable: Ensures complete isolation by preventing other transactions from inserting, updating, or deleting rows that are being accessed by the current transaction, preventing all concurrency anomalies.