sql
Copy code
CREATE TABLE employees (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    department VARCHAR2(50),
    salary NUMBER(10, 2)
);
Step 2: Insert Sample Data
Next, we insert some sample data into the employees table:

sql
Copy code
INSERT INTO employees (employee_id, first_name, last_name, department, salary) VALUES
(1, 'Manoj', 'Kumar', 'Sales', 50000),
(2, 'Manish', 'Das', 'Marketing', 60000),
(3, 'Samaish', 'Kumar', 'IT', 75000),
(4, 'Avik', 'Kholi', 'HR', 65000),

Step 3: Query Without Index
Now, we perform a query on the department column without an index:

sql
Copy code
EXPLAIN PLAN FOR
SELECT * FROM employees WHERE department = 'Sales';


Without an index, the database will perform a full table scan to find the matching rows. This can be slow, especially for large tables. The execution plan will show that a full table scan is used.

Step 4: Create an Index
Create an index on the department column to improve query performance:

sql
Copy code
CREATE INDEX idx_department ON employees(department);
Step 5: Query With Index
Perform the same query again:

sql
Copy code
EXPLAIN PLAN FOR
SELECT * FROM employees WHERE department = 'Sales';


With the index in place, the database can quickly locate the rows with the specified department, significantly improving the query performance. The execution plan will show that the query uses the index, resulting in faster execution times.

Step 6: Drop the Index
Remove the index using the DROP INDEX statement:

sql
Copy code
DROP INDEX idx_department;
Step 7: Query Without Index Again
Perform the query one more time:

sql
Copy code
EXPLAIN PLAN FOR
SELECT * FROM employees WHERE department = 'Sales';


Without the index, the database will revert to a full table scan, and the execution plan will show that the query is slower compared to when the index was present.

Analysis
Query Without Index:

Execution Plan: Full table scan.
Performance: Slower, especially for large tables.
Query With Index:

Execution Plan: Uses the index to quickly locate rows.
Performance: Faster due to the index.
Query After Dropping Index:

Execution Plan: Full table scan again.
Performance: Slower, similar to the initial query without the index.